/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Commit } from "./Commit";
import { CommitCountArgs } from "./CommitCountArgs";
import { CommitFindManyArgs } from "./CommitFindManyArgs";
import { CommitFindUniqueArgs } from "./CommitFindUniqueArgs";
import { CreateCommitArgs } from "./CreateCommitArgs";
import { UpdateCommitArgs } from "./UpdateCommitArgs";
import { DeleteCommitArgs } from "./DeleteCommitArgs";
import { MetricFindManyArgs } from "../../metric/base/MetricFindManyArgs";
import { Metric } from "../../metric/base/Metric";
import { CommitService } from "../commit.service";
@graphql.Resolver(() => Commit)
export class CommitResolverBase {
  constructor(protected readonly service: CommitService) {}

  async _commitsMeta(
    @graphql.Args() args: CommitCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Commit])
  async commits(@graphql.Args() args: CommitFindManyArgs): Promise<Commit[]> {
    return this.service.commits(args);
  }

  @graphql.Query(() => Commit, { nullable: true })
  async commit(
    @graphql.Args() args: CommitFindUniqueArgs
  ): Promise<Commit | null> {
    const result = await this.service.commit(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Commit)
  async createCommit(@graphql.Args() args: CreateCommitArgs): Promise<Commit> {
    return await this.service.createCommit({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Commit)
  async updateCommit(
    @graphql.Args() args: UpdateCommitArgs
  ): Promise<Commit | null> {
    try {
      return await this.service.updateCommit({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Commit)
  async deleteCommit(
    @graphql.Args() args: DeleteCommitArgs
  ): Promise<Commit | null> {
    try {
      return await this.service.deleteCommit(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Metric], { name: "metrics" })
  async findMetrics(
    @graphql.Parent() parent: Commit,
    @graphql.Args() args: MetricFindManyArgs
  ): Promise<Metric[]> {
    const results = await this.service.findMetrics(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
